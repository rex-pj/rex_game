//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "flashcard_type_relation")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub flashcard_id: i32,
    pub flashcard_type_id: i32,
    pub created_date: DateTimeWithTimeZone,
    pub updated_date: DateTimeWithTimeZone,
    pub created_by_id: Option<i32>,
    pub updated_by_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::flashcard::Entity",
        from = "Column::FlashcardId",
        to = "super::flashcard::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Flashcard,
    #[sea_orm(
        belongs_to = "super::flashcard_type::Entity",
        from = "Column::FlashcardTypeId",
        to = "super::flashcard_type::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    FlashcardType,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::CreatedById",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    User2,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::UpdatedById",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    User1,
}

impl Related<super::flashcard::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Flashcard.def()
    }
}

impl Related<super::flashcard_type::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FlashcardType.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
